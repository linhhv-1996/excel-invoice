// app/composables/usePdfGenerator.ts
import { PDFDocument, StandardFonts, rgb, degrees } from 'pdf-lib'
import type { Invoice, Settings } from './useInvoiceGenerator'

export function usePdfGenerator() {
  const renderPdf = async (invoice: Invoice, settings: Settings, opts: { watermark?: boolean } = {}) => {
    const pdfDoc = await PDFDocument.create()
    const page = pdfDoc.addPage()

    const fonts = {
      Helvetica: await pdfDoc.embedFont(StandardFonts.Helvetica),
      HelveticaBold: await pdfDoc.embedFont(StandardFonts.HelveticaBold),
      Courier: await pdfDoc.embedFont(StandardFonts.Courier),
      TimesRoman: await pdfDoc.embedFont(StandardFonts.TimesRoman),
      TimesRomanBold: await pdfDoc.embedFont(StandardFonts.TimesRomanBold),
    }

    const colors = {
        black: rgb(0, 0, 0),
        grey: rgb(0.35, 0.35, 0.35),
        lightGrey: rgb(0.9, 0.9, 0.9),
        primary: rgb(0.25, 0.25, 0.65), // For Elegant
    }

    const moneyStr = (n: number) => {
      try {
        return new Intl.NumberFormat(settings.locale, { style: 'currency', currency: settings.currency }).format(n || 0)
      }
      catch { return String(n || 0) }
    }

    switch (settings.template) {
        case 'classic':
            await renderModernOrClassic(pdfDoc, page, invoice, settings, fonts, colors, moneyStr, 'classic');
            break;
        case 'technical':
            await renderTechnical(pdfDoc, page, invoice, settings, fonts, colors, moneyStr);
            break;
        case 'elegant':
            await renderElegant(pdfDoc, page, invoice, settings, fonts, colors, moneyStr);
            break;
        case 'modern':
        default:
            await renderModernOrClassic(pdfDoc, page, invoice, settings, fonts, colors, moneyStr, 'modern');
            break;
    }

    if (opts.watermark) {
      page.drawText('GENERATED BY EXCEL INVOICE PRO', { x: 100, y: 420, size: 40, font: fonts.HelveticaBold, color: rgb(0, 0, 0), rotate: degrees(-30), opacity: 0.05 })
    }

    return await pdfDoc.save()
  }

  // **** FUNCTION ĐÃ ĐƯỢC CẬP NHẬT ĐẦY ĐỦ ****
  async function renderModernOrClassic(pdfDoc: any, page: any, invoice: Invoice, settings: Settings, fonts: any, colors: any, moneyStr: Function, type: 'modern' | 'classic') {
    let { width, height } = page.getSize();
    const m = { top: 40, right: 40, bottom: 50, left: 40 };

    const font = type === 'classic' ? fonts.TimesRoman : fonts.Helvetica;
    const bold = type === 'classic' ? fonts.TimesRomanBold : fonts.HelveticaBold;

    const black = colors.black
    const grey = colors.grey
    const lightGrey = colors.lightGrey

    const tw = width - m.left - m.right
    const cols = { desc: 0.60, qty: 0.10, unit: 0.15, total: 0.15 }
    const x1 = m.left
    const x2 = m.left + tw * cols.desc
    const x3 = x2 + tw * cols.qty
    const x4 = x3 + tw * cols.unit
    const wDesc = tw * cols.desc
    const wQty = tw * cols.qty
    const wUnit = tw * cols.unit
    const wTot = tw * cols.total

    const pad = 10; const lh = 12
    let y = height - m.top

    const draw = (text: string, x: number, y0: number, size = 10, f = font, color: any = black) => page.drawText(String(text ?? ''), { x, y: y0, size, font: f, color })
    
    const right = (text: string, xRight: number, y0: number, size = 10, f = font, color: any = black) => {
      const t = String(text ?? '')
      const w = f.widthOfTextAtSize(t, size)
      page.drawText(t, { x: xRight - w, y: y0, size, font: f, color })
    }

    const wrap = (text: string, maxW: number, f = font, size = 10) => {
      const words = String(text || '').split(/\s+/)
      const lines: string[] = []
      let line = ''
      for (const w of words) {
        const t = line ? `${line} ${w}` : w
        if (f.widthOfTextAtSize(t, size) > maxW && line) {
          lines.push(line)
          line = w
        }
        else {
          line = t
        }
      }
      if (line) lines.push(line)
      return lines.length ? lines : ['']
    }

    const tableHeader = () => {
      page.drawRectangle({ x: m.left, y: y - 4, width: tw, height: 20, color: rgb(0.95, 0.95, 0.95) })
      draw('Description', x1 + pad, y, 10, bold, grey)
      right('Qty', x2 + wQty - pad, y, 10, bold, grey)
      right('Unit Price', x3 + wUnit - pad, y, 10, bold, grey)
      right('Total', x4 + wTot - pad, y, 10, bold, grey)
    }

    const ensure = (need: number, includeHeader = false) => {
      const extra = includeHeader ? 40 : 0
      if (y - (need + extra) < m.bottom) {
        page = pdfDoc.addPage([width, height]);
        y = height - m.top
        tableHeader()
        y -= 25
      }
    }

    // Header and Meta info
    draw('INVOICE', m.left, y, 18, bold, black)
    right(settings.cName || '', width - m.right, y, 11, bold)
    y -= 16
    const addr = [settings.cAddr, settings.cTax ? (`TAX: ${settings.cTax}`) : ''].filter(Boolean).join(' • ')
    right(addr, width - m.right, y, 9, font, grey)
    y -= 28
    draw('Billed To', m.left, y, 9, font, grey)
    draw(invoice.customer || '', m.left, y - 14, 11, bold)
    const metaY = y
    y -= 32
    if (invoice.email) { draw(invoice.email, m.left, y, 10, font); y -= 14 }
    if (invoice.groupBy) { draw(`Project/Group: ${invoice.groupBy}`, m.left, y, 10, font); y -= 14 }
    const xRight = width - m.right
    right('Invoice Number', xRight, metaY, 9, font, grey)
    right(invoice.invoiceNo || '', xRight, metaY - 14, 11, bold)
    right('Date of Issue', xRight, metaY - 32, 9, font, grey)
    right(new Date().toLocaleDateString(settings.locale), xRight, metaY - 46, 11, bold)
    const dateBaseline = metaY - 46
    const dateTextH = 12
    const metaBottom = dateBaseline - dateTextH
    const gapBeforeTable = 24
    y = Math.min(y, metaBottom - gapBeforeTable)
    ensure(0)

    // Table header
    tableHeader()
    y-= 5; // spacing

    // Table rows
    let sum = 0
    for (const l of invoice.lines) {
      const descLines = wrap(l.desc, wDesc - pad * 2, font, 10)
      const paddingTop = 8
      const paddingBottom = 8
      const rowHeight = descLines.length * lh + paddingTop + paddingBottom
      
      ensure(rowHeight, true)
      
      const topOfRow = y

      const contentY = topOfRow - paddingTop - (lh - 2)

      right(String(l.qty), x2 + wQty - pad, contentY, 10, font)
      right(moneyStr(l.unit), x3 + wUnit - pad, contentY, 10, font)
      right(moneyStr(l.total), x4 + wTot - pad, contentY, 10, bold)

      let currentDescY = contentY
      for (const dl of descLines) {
        draw(dl, x1 + pad, currentDescY, 10, font)
        currentDescY -= lh
      }
      y = topOfRow - rowHeight

      page.drawLine({
        start: { x: m.left, y },
        end: { x: width - m.right, y },
        thickness: 0.5,
        color: lightGrey,
      })
      
      sum += (l.total || 0)
    }

    // Grand Total
    const tax = (sum * (settings.taxPercent || 0)) / 100
    const grandTotal = sum + tax;
    y -= 20
    ensure(60)
    right('Subtotal', x4 - pad, y, 10, font, grey)
    right(moneyStr(sum), width - m.right, y, 10, font)
    y -= 15
    if(tax > 0) {
      right(`Tax (${settings.taxPercent}%)`, x4 - pad, y, 10, font, grey)
      right(moneyStr(tax), width - m.right, y, 10, font)
      y -= 15
    }
    right('Grand Total', x4 - pad, y, 12, bold, black)
    right(moneyStr(grandTotal), width - m.right, y, 12, bold, black)
  }

  // ... (renderTechnical and renderElegant functions remain the same) ...
  async function renderTechnical(pdfDoc: any, page: any, invoice: Invoice, settings: Settings, fonts: any, colors: any, moneyStr: Function) {
      const { width, height } = page.getSize();
      const m = { top: 35, right: 35, bottom: 35, left: 35 };
      const font = fonts.Courier;
      const bold = fonts.Courier; // Mono fonts don't really have bold, but we use the same for consistency
      let y = height - m.top;

      page.drawText(`// INVOICE DOCUMENT`, { x: m.left, y, font, size: 16, color: colors.grey });
      y -= 30;

      // Header section
      page.drawText(`[SENDER]`, { x: m.left, y, font, size: 10, color: colors.grey });
      page.drawText(settings.cName.padEnd(30) + `INV_ID: ${invoice.invoiceNo}`, { x: m.left, y: y-15, font, size: 10 });
      page.drawText(settings.cAddr.padEnd(30) + `DATE:   ${new Date().toLocaleDateString(settings.locale)}`, { x: m.left, y: y-30, font, size: 10 });
      y -= 60;

      page.drawText(`[RECIPIENT]`, { x: m.left, y, font, size: 10, color: colors.grey });
      page.drawText(invoice.customer, { x: m.left, y: y - 15, font, size: 10 });
      page.drawText(invoice.email, { x: m.left, y: y - 30, font, size: 10 });
      y -= 60;

      // Table
      const line = '-'.repeat(78);
      page.drawText(line, { x: m.left, y, font, size: 10, color: colors.grey });
      y -= 15;
      page.drawText(`ITEM/DESCRIPTION`.padEnd(47) + `QTY`.padEnd(10) + `UNIT`.padEnd(12) + `TOTAL`, { x: m.left, y, font, size: 10 });
      y -= 5;
      page.drawText(line, { x: m.left, y, font, size: 10, color: colors.grey });
      y -= 15;

      let total = 0;
      for (const item of invoice.lines) {
          page.drawText(item.desc.padEnd(47).substring(0,47) + String(item.qty).padEnd(10) + moneyStr(item.unit).padEnd(12) + moneyStr(item.total), { x: m.left, y, font, size: 10 });
          y -= 15;
          total += item.total;
      }
      y -= 15;

      page.drawText(line, { x: m.left, y, font, size: 10, color: colors.grey });
      y -= 15;
      const tax = (total * (settings.taxPercent || 0)) / 100;
      page.drawText(`SUBTOTAL: ${moneyStr(total)}`, { x: width - m.right - 150, y, font, size: 10 });
      y -= 15;
      page.drawText(`TAX (${settings.taxPercent}%): ${moneyStr(tax)}`, { x: width - m.right - 150, y, font, size: 10 });
      y -= 5;
      page.drawText("--------------", { x: width - m.right - 150, y, font, size: 10 });
      y -= 15;
      page.drawText(`TOTAL: ${moneyStr(total + tax)}`, { x: width - m.right - 150, y, font, size: 12 });
  }

  async function renderElegant(pdfDoc: any, page: any, invoice: Invoice, settings: Settings, fonts: any, colors: any, moneyStr: Function) {
      const { width, height } = page.getSize();
      const m = { top: 50, right: 50, bottom: 50, left: 50 };
      const font = fonts.TimesRoman;
      const bold = fonts.TimesRomanBold;
      const sidebarWidth = 160;

      // Draw colored sidebar
      page.drawRectangle({
          x: 0,
          y: 0,
          width: sidebarWidth,
          height,
          color: rgb(0.95, 0.95, 0.98),
      });

      // Sidebar content
      page.drawText(settings.cName, { x: 25, y: height - m.top, font: bold, size: 14, color: colors.primary });
      page.drawText(settings.cAddr, { x: 25, y: height - m.top - 30, font, size: 9, color: colors.grey, lineHeight: 12 });
      
      let y = height - m.top - 150;
      page.drawText('INVOICE TO', { x: 25, y, font: bold, size: 9, color: colors.grey });
      y -= 15;
      page.drawText(invoice.customer, { x: 25, y, font: bold, size: 11, color: colors.black });
      y -= 13;
      page.drawText(invoice.email, { x: 25, y, font, size: 9, color: colors.grey });


      // Main content
      const contentX = sidebarWidth + 30;
      y = height - m.top;
      page.drawText('INVOICE', { x: contentX, y, font: bold, size: 28, color: colors.black, opacity: 0.8 });
      y -= 50;

      page.drawText(`Invoice #${invoice.invoiceNo}`, { x: contentX, y, font, size: 10, color: colors.grey });
      y -= 15;
      page.drawText(`Date: ${new Date().toLocaleDateString(settings.locale)}`, { x: contentX, y, font, size: 10, color: colors.grey });
      y -= 50;
      
      // Table Header
      page.drawLine({ start: { x: contentX, y }, end: { x: width - m.right, y }, thickness: 1.5, color: colors.primary });
      y -= 20;
      page.drawText('DESCRIPTION', { x: contentX, y, font: bold, size: 9, color: colors.grey });
      page.drawText('TOTAL', { x: width - m.right - 50, y, font: bold, size: 9, color: colors.grey });
      y -= 10;
      page.drawLine({ start: { x: contentX, y }, end: { x: width - m.right, y }, thickness: 0.5, color: colors.lightGrey });
      y -= 20;

      let total = 0;
      for(const item of invoice.lines) {
          page.drawText(item.desc, { x: contentX, y, font, size: 10, color: colors.black });
          const qtyText = `${item.qty} x ${moneyStr(item.unit)}`;
          page.drawText(qtyText, { x: contentX, y: y - 12, font, size: 8, color: colors.grey });

          const totalText = moneyStr(item.total);
          const textWidth = bold.widthOfTextAtSize(totalText, 10);
          page.drawText(totalText, { x: width - m.right - textWidth, y, font: bold, size: 10, color: colors.black });
          
          y -= 40;
          page.drawLine({ start: { x: contentX, y: y + 10 }, end: { x: width - m.right, y: y + 10 }, thickness: 0.5, color: colors.lightGrey });
          total += item.total;
      }

      // Totals
      y -= 20;
      const tax = (total * (settings.taxPercent || 0)) / 100;
      const grandTotal = total + tax;
      
      const subtotalText = moneyStr(total);
      let textWidth = font.widthOfTextAtSize(subtotalText, 10);
      page.drawText('Subtotal', { x: contentX + 200, y, font, size: 10, color: colors.grey });
      page.drawText(subtotalText, { x: width - m.right - textWidth, y, font, size: 10, color: colors.black });
      y -= 20;

      const taxText = moneyStr(tax);
      textWidth = font.widthOfTextAtSize(taxText, 10);
      page.drawText(`Tax (${settings.taxPercent}%)`, { x: contentX + 200, y, font, size: 10, color: colors.grey });
      page.drawText(taxText, { x: width - m.right - textWidth, y, font, size: 10, color: colors.black });

      y -= 20;
      page.drawLine({ start: { x: contentX + 200, y }, end: { x: width - m.right, y }, thickness: 1, color: colors.black });
      y -= 20;

      const grandTotalText = moneyStr(grandTotal);
      textWidth = bold.widthOfTextAtSize(grandTotalText, 14);
      page.drawText('Total Due', { x: contentX + 200, y, font: bold, size: 14, color: colors.black });
      page.drawText(grandTotalText, { x: width - m.right - textWidth, y, font: bold, size: 14, color: colors.black });
  }

  return { renderPdf }
}
