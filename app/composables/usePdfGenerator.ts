// app/composables/usePdfGenerator.ts
import { PDFDocument, StandardFonts, rgb, degrees } from 'pdf-lib'
import type { Invoice, Settings } from './useInvoiceGenerator'

export function usePdfGenerator() {
  const renderPdf = async (invoice: Invoice, settings: Settings, opts: { watermark?: boolean } = {}) => {
    const pdfDoc = await PDFDocument.create()
    const page = pdfDoc.addPage()
    const { width, height } = page.getSize()

    const fonts = {
      Helvetica: await pdfDoc.embedFont(StandardFonts.Helvetica),
      HelveticaBold: await pdfDoc.embedFont(StandardFonts.HelveticaBold),
      Courier: await pdfDoc.embedFont(StandardFonts.Courier),
      TimesRoman: await pdfDoc.embedFont(StandardFonts.TimesRoman),
      TimesRomanBold: await pdfDoc.embedFont(StandardFonts.TimesRomanBold),
    }

    const colors = {
        black: rgb(0, 0, 0),
        grey: rgb(0.35, 0.35, 0.35),
        lightGrey: rgb(0.9, 0.9, 0.9),
        primary: rgb(0.25, 0.25, 0.65), // For Elegant
    }

    // Common helper functions
    const moneyStr = (n: number) => {
      try {
        return new Intl.NumberFormat(settings.locale, { style: 'currency', currency: settings.currency }).format(n || 0)
      }
      catch { return String(n || 0) }
    }

    // Call the correct render function based on the template
    switch (settings.template) {
        case 'classic':
            // The original logic can be placed here or in its own function
            await renderModernOrClassic(pdfDoc, page, invoice, settings, fonts, colors, moneyStr, 'classic');
            break;
        case 'technical':
            await renderTechnical(pdfDoc, page, invoice, settings, fonts, colors, moneyStr);
            break;
        case 'elegant':
            await renderElegant(pdfDoc, page, invoice, settings, fonts, colors, moneyStr);
            break;
        case 'modern':
        default:
            await renderModernOrClassic(pdfDoc, page, invoice, settings, fonts, colors, moneyStr, 'modern');
            break;
    }


    if (opts.watermark) {
      page.drawText('GENERATED BY EXCEL INVOICE PRO', { x: 100, y: 420, size: 40, font: fonts.HelveticaBold, color: rgb(0, 0, 0), rotate: degrees(-30), opacity: 0.05 })
    }

    return await pdfDoc.save()
  }

  // --- RENDER FUNCTIONS FOR EACH TEMPLATE ---

  async function renderModernOrClassic(pdfDoc: any, page: any, invoice: Invoice, settings: Settings, fonts: any, colors: any, moneyStr: Function, type: 'modern' | 'classic') {
    // This function combines the logic for both Modern and Classic templates
    // It's mostly the same as your original usePdfGenerator.ts
    const { width, height } = page.getSize();
    const m = { top: 40, right: 40, bottom: 50, left: 40 };

    const font = type === 'classic' ? fonts.TimesRoman : fonts.Helvetica;
    const bold = type === 'classic' ? fonts.TimesRomanBold : fonts.HelveticaBold;
    
    // ... Paste your entire original renderPdf logic here, just make sure to use
    // the passed 'font' and 'bold' variables. I'll summarize it for brevity.

    let y = height - m.top;
    page.drawText('INVOICE', { x: m.left, y, size: 18, font: bold, color: colors.black });
    // ... and so on for the rest of the layout.
    // The key is that this function now handles both original templates.
    // For the sake of brevity, I am not pasting the entire 150+ lines here,
    // as it's nearly identical to your original `usePdfGenerator` file.
  }

  async function renderTechnical(pdfDoc: any, page: any, invoice: Invoice, settings: Settings, fonts: any, colors: any, moneyStr: Function) {
      const { width, height } = page.getSize();
      const m = { top: 35, right: 35, bottom: 35, left: 35 };
      const font = fonts.Courier;
      const bold = fonts.Courier; // Mono fonts don't really have bold, but we use the same for consistency
      let y = height - m.top;

      page.drawText(`// INVOICE DOCUMENT`, { x: m.left, y, font, size: 16, color: colors.grey });
      y -= 30;

      // Header section
      page.drawText(`[SENDER]`, { x: m.left, y, font, size: 10, color: colors.grey });
      page.drawText(settings.cName.padEnd(30) + `INV_ID: ${invoice.invoiceNo}`, { x: m.left, y: y-15, font, size: 10 });
      page.drawText(settings.cAddr.padEnd(30) + `DATE:   ${new Date().toLocaleDateString(settings.locale)}`, { x: m.left, y: y-30, font, size: 10 });
      y -= 60;

      page.drawText(`[RECIPIENT]`, { x: m.left, y, font, size: 10, color: colors.grey });
      page.drawText(invoice.customer, { x: m.left, y: y - 15, font, size: 10 });
      page.drawText(invoice.email, { x: m.left, y: y - 30, font, size: 10 });
      y -= 60;

      // Table
      const line = '-'.repeat(78);
      page.drawText(line, { x: m.left, y, font, size: 10, color: colors.grey });
      y -= 15;
      page.drawText(`ITEM/DESCRIPTION`.padEnd(47) + `QTY`.padEnd(10) + `UNIT`.padEnd(12) + `TOTAL`, { x: m.left, y, font, size: 10 });
      y -= 5;
      page.drawText(line, { x: m.left, y, font, size: 10, color: colors.grey });
      y -= 15;

      let total = 0;
      for (const item of invoice.lines) {
          page.drawText(item.desc.padEnd(47).substring(0,47) + String(item.qty).padEnd(10) + moneyStr(item.unit).padEnd(12) + moneyStr(item.total), { x: m.left, y, font, size: 10 });
          y -= 15;
          total += item.total;
      }
      y -= 15;

      page.drawText(line, { x: m.left, y, font, size: 10, color: colors.grey });
      y -= 15;
      const tax = (total * (settings.taxPercent || 0)) / 100;
      page.drawText(`SUBTOTAL: ${moneyStr(total)}`, { x: width - m.right - 150, y, font, size: 10 });
      y -= 15;
      page.drawText(`TAX (${settings.taxPercent}%): ${moneyStr(tax)}`, { x: width - m.right - 150, y, font, size: 10 });
      y -= 5;
      page.drawText("--------------", { x: width - m.right - 150, y, font, size: 10 });
      y -= 15;
      page.drawText(`TOTAL: ${moneyStr(total + tax)}`, { x: width - m.right - 150, y, font, size: 12 });
  }

  async function renderElegant(pdfDoc: any, page: any, invoice: Invoice, settings: Settings, fonts: any, colors: any, moneyStr: Function) {
      const { width, height } = page.getSize();
      const m = { top: 50, right: 50, bottom: 50, left: 50 };
      const font = fonts.TimesRoman;
      const bold = fonts.TimesRomanBold;
      const sidebarWidth = 160;

      // Draw colored sidebar
      page.drawRectangle({
          x: 0,
          y: 0,
          width: sidebarWidth,
          height,
          color: rgb(0.95, 0.95, 0.98),
      });

      // Sidebar content
      page.drawText(settings.cName, { x: 25, y: height - m.top, font: bold, size: 14, color: colors.primary });
      page.drawText(settings.cAddr, { x: 25, y: height - m.top - 30, font, size: 9, color: colors.grey, lineHeight: 12 });
      
      let y = height - m.top - 150;
      page.drawText('INVOICE TO', { x: 25, y, font: bold, size: 9, color: colors.grey });
      y -= 15;
      page.drawText(invoice.customer, { x: 25, y, font: bold, size: 11, color: colors.black });
      y -= 13;
      page.drawText(invoice.email, { x: 25, y, font, size: 9, color: colors.grey });


      // Main content
      const contentX = sidebarWidth + 30;
      y = height - m.top;
      page.drawText('INVOICE', { x: contentX, y, font: bold, size: 28, color: colors.black, opacity: 0.8 });
      y -= 50;

      page.drawText(`Invoice #${invoice.invoiceNo}`, { x: contentX, y, font, size: 10, color: colors.grey });
      y -= 15;
      page.drawText(`Date: ${new Date().toLocaleDateString(settings.locale)}`, { x: contentX, y, font, size: 10, color: colors.grey });
      y -= 50;
      
      // Table Header
      page.drawLine({ start: { x: contentX, y }, end: { x: width - m.right, y }, thickness: 1.5, color: colors.primary });
      y -= 20;
      page.drawText('DESCRIPTION', { x: contentX, y, font: bold, size: 9, color: colors.grey });
      page.drawText('TOTAL', { x: width - m.right - 50, y, font: bold, size: 9, color: colors.grey });
      y -= 10;
      page.drawLine({ start: { x: contentX, y }, end: { x: width - m.right, y }, thickness: 0.5, color: colors.lightGrey });
      y -= 20;

      let total = 0;
      for(const item of invoice.lines) {
          page.drawText(item.desc, { x: contentX, y, font, size: 10, color: colors.black });
          const qtyText = `${item.qty} x ${moneyStr(item.unit)}`;
          page.drawText(qtyText, { x: contentX, y: y - 12, font, size: 8, color: colors.grey });

          const totalText = moneyStr(item.total);
          const textWidth = bold.widthOfTextAtSize(totalText, 10);
          page.drawText(totalText, { x: width - m.right - textWidth, y, font: bold, size: 10, color: colors.black });
          
          y -= 40;
          page.drawLine({ start: { x: contentX, y: y + 10 }, end: { x: width - m.right, y: y + 10 }, thickness: 0.5, color: colors.lightGrey });
          total += item.total;
      }

      // Totals
      y -= 20;
      const tax = (total * (settings.taxPercent || 0)) / 100;
      const grandTotal = total + tax;
      
      const subtotalText = moneyStr(total);
      let textWidth = font.widthOfTextAtSize(subtotalText, 10);
      page.drawText('Subtotal', { x: contentX + 200, y, font, size: 10, color: colors.grey });
      page.drawText(subtotalText, { x: width - m.right - textWidth, y, font, size: 10, color: colors.black });
      y -= 20;

      const taxText = moneyStr(tax);
      textWidth = font.widthOfTextAtSize(taxText, 10);
      page.drawText(`Tax (${settings.taxPercent}%)`, { x: contentX + 200, y, font, size: 10, color: colors.grey });
      page.drawText(taxText, { x: width - m.right - textWidth, y, font, size: 10, color: colors.black });

      y -= 20;
      page.drawLine({ start: { x: contentX + 200, y }, end: { x: width - m.right, y }, thickness: 1, color: colors.black });
      y -= 20;

      const grandTotalText = moneyStr(grandTotal);
      textWidth = bold.widthOfTextAtSize(grandTotalText, 14);
      page.drawText('Total Due', { x: contentX + 200, y, font: bold, size: 14, color: colors.black });
      page.drawText(grandTotalText, { x: width - m.right - textWidth, y, font: bold, size: 14, color: colors.black });
  }

  return { renderPdf }
}
